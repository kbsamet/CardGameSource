[gd_scene load_steps=24 format=3 uid="uid://bjrjps2akf3w2"]

[ext_resource type="Script" path="res://Scenes/enemies/Enemy.gd" id="1_iuwds"]
[ext_resource type="Texture2D" uid="uid://cuni7yv8mtpjw" path="res://Sprites/ui/empty_bar.png" id="2_6xp31"]
[ext_resource type="Texture2D" uid="uid://d2y6kkvtrttwx" path="res://Sprites/enemies/Zombie.png" id="2_mm60a"]
[ext_resource type="Shader" path="res://Scenes/enemies/Enemy.gdshader" id="2_uemmq"]
[ext_resource type="LabelSettings" uid="uid://ccugtg3ly1noj" path="res://Misc/CardLabelSettings.tres" id="3_22tp7"]
[ext_resource type="OccluderPolygon2D" uid="uid://0kadogfnuoug" path="res://Resources/enemies/occluders/Vampire.tres" id="5_dygeo"]
[ext_resource type="Texture2D" uid="uid://dnuaeetyyjit8" path="res://Sprites/ui/statusEffects/block.png" id="5_pxudm"]
[ext_resource type="FontFile" uid="uid://35ubclsxhjgd" path="res://Fonts/lunchds.ttf" id="6_bvov2"]
[ext_resource type="Texture2D" uid="uid://dyt0c8aywl7in" path="res://Sprites/ui/hit_particle.png" id="7_n7t8x"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_fjtdi"]
shader = ExtResource("2_uemmq")
shader_parameter/color = Color(0.662745, 0.286275, 0.286275, 1)
shader_parameter/daze_color = Color(0.57, 0.57, 0.57, 1)
shader_parameter/hit_color = Color(1, 1, 1, 1)
shader_parameter/time = 0.0
shader_parameter/outline = false
shader_parameter/dazed = false
shader_parameter/hit = false

[sub_resource type="Animation" id="Animation_qnc5y"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite:material:shader_parameter/time")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [null]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Control/HitAmount:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Control/HitAmount:modulate")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 1)]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Control/BlockAmount:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("Control/BlockAmount:modulate")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 1)]
}

[sub_resource type="Animation" id="Animation_1yf6e"]
resource_name = "attack_end"
length = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:position:y")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [100.0, 0.0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath(".:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector2(1.4, 1.4), Vector2(1, 1)]
}

[sub_resource type="Animation" id="Animation_53017"]
resource_name = "attack_rise"
length = 0.4
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:position:y")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [0.0, 100.0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath(".:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.3),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector2(1, 1), Vector2(1.4, 1.4)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath(".:rotation")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 0,
"values": [0.0, -0.129154, 0.129154, 0.0]
}

[sub_resource type="Animation" id="Animation_fvjqp"]
resource_name = "hit"
length = 0.4
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Control/HitAmount:position:y")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.4),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [135.0, -100.0, 135.0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Control/HitAmount:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.3),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Control/HitAmount:modulate:a")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.3, 0.4),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [1.0, 0.0, 1.0]
}

[sub_resource type="Animation" id="Animation_xhvdt"]
resource_name = "hit_block"
length = 0.4
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Control/BlockAmount:position:y")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3, 0.4),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [137.0, -100.0, 137.0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Control/BlockAmount:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.3),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Control/BlockAmount:modulate:a")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.3, 0.4),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [1.0, 0.0, 1.0]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_oafv5"]
_data = {
"RESET": SubResource("Animation_qnc5y"),
"attack_end": SubResource("Animation_1yf6e"),
"attack_rise": SubResource("Animation_53017"),
"hit": SubResource("Animation_fvjqp"),
"hit_block": SubResource("Animation_xhvdt")
}

[sub_resource type="Shader" id="Shader_cjra7"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.2.stable's ParticleProcessMaterial.

shader_type particles;
render_mode disable_velocity;
uniform vec3 direction;
uniform float spread;
uniform float flatness;
uniform float inherit_emitter_velocity_ratio = 0;
uniform float initial_linear_velocity_min;
uniform float initial_linear_velocity_max;
uniform float directional_velocity_min;
uniform float directional_velocity_max;
uniform float angular_velocity_min;
uniform float angular_velocity_max;
uniform float orbit_velocity_min;
uniform float orbit_velocity_max;
uniform float radial_velocity_min;
uniform float radial_velocity_max;
uniform float linear_accel_min;
uniform float linear_accel_max;
uniform float radial_accel_min;
uniform float radial_accel_max;
uniform float tangent_accel_min;
uniform float tangent_accel_max;
uniform float damping_min;
uniform float damping_max;
uniform float initial_angle_min;
uniform float initial_angle_max;
uniform float scale_min;
uniform float scale_max;
uniform float hue_variation_min;
uniform float hue_variation_max;
uniform float anim_speed_min;
uniform float anim_speed_max;
uniform float anim_offset_min;
uniform float anim_offset_max;
uniform float lifetime_randomness;
uniform vec3 emission_shape_offset = vec3(0.);
uniform vec3 emission_shape_scale = vec3(1.);
uniform vec3 velocity_pivot = vec3(0.);
uniform vec3 emission_box_extents;
uniform vec4 color_value : source_color;
uniform vec3 gravity;
uniform sampler2D sprite;



float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

struct DisplayParameters{
	vec3 scale;
	float hue_rotation;
	float animation_speed;
	float animation_offset;
	float lifetime;
	vec4 color;
};

struct DynamicsParameters{
	float angle;
	float angular_velocity;
	float initial_velocity_multiplier;
	float directional_velocity;
	float radial_velocity;
	float orbit_velocity;
};
struct PhysicalParameters{
	float linear_accel;
	float radial_accel;
	float tangent_accel;
	float damping;
};

void calculate_initial_physical_params(inout PhysicalParameters params, inout uint alt_seed){
	params.linear_accel = mix(linear_accel_min, linear_accel_max, rand_from_seed(alt_seed));
	params.radial_accel = mix(radial_accel_min, radial_accel_max, rand_from_seed(alt_seed));
	params.tangent_accel = mix(tangent_accel_min, tangent_accel_max, rand_from_seed(alt_seed));
	params.damping = mix(damping_min, damping_max, rand_from_seed(alt_seed));
}

void calculate_initial_dynamics_params(inout DynamicsParameters params,inout uint alt_seed){
	// -------------------- DO NOT REORDER OPERATIONS, IT BREAKS VISUAL COMPATIBILITY
	// -------------------- ADD NEW OPERATIONS AT THE BOTTOM
	params.angle = mix(initial_angle_min, initial_angle_max, rand_from_seed(alt_seed));
	params.angular_velocity = mix(angular_velocity_min, angular_velocity_max, rand_from_seed(alt_seed));
	params.initial_velocity_multiplier = mix(initial_linear_velocity_min, initial_linear_velocity_max,rand_from_seed(alt_seed));
	params.directional_velocity = mix(directional_velocity_min, directional_velocity_max,rand_from_seed(alt_seed));
	params.radial_velocity = mix(radial_velocity_min, radial_velocity_max,rand_from_seed(alt_seed));
	params.orbit_velocity = mix(orbit_velocity_min, orbit_velocity_max,rand_from_seed(alt_seed));
}
void calculate_initial_display_params(inout DisplayParameters params,inout uint alt_seed){
	// -------------------- DO NOT REORDER OPERATIONS, IT BREAKS VISUAL COMPATIBILITY
	// -------------------- ADD NEW OPERATIONS AT THE BOTTOM
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
   params.scale = vec3(mix(scale_min, scale_max, rand_from_seed(alt_seed)));
   params.scale = sign(params.scale) * max(abs(params.scale), 0.001);
	params.hue_rotation =  pi * 2.0 * mix(hue_variation_min, hue_variation_max, rand_from_seed(alt_seed));
	params.animation_speed = mix(anim_speed_min, anim_speed_max, rand_from_seed(alt_seed));
	params.animation_offset = mix(anim_offset_min, anim_offset_max, rand_from_seed(alt_seed));
	params.lifetime = (1.0 - lifetime_randomness * rand_from_seed(alt_seed));
	params.color = color_value;
}
void process_display_param(inout DisplayParameters parameters, float lifetime){
	// compile-time add textures
}
vec3 calculate_initial_position(inout uint alt_seed) {
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
	vec3 pos = vec3(0.);
		pos = vec3(rand_from_seed(alt_seed) * 2.0 - 1.0, rand_from_seed(alt_seed) * 2.0 - 1.0, rand_from_seed(alt_seed) * 2.0 - 1.0) * emission_box_extents;
	return pos * emission_shape_scale + emission_shape_offset;
}

vec3 process_orbit_displacement(DynamicsParameters param, float lifetime, inout uint alt_seed, mat4 transform, mat4 emission_transform,float delta, float total_lifetime){
if(abs(param.orbit_velocity) < 0.01 || delta < 0.001){ return vec3(0.0);}

	vec3 displacement = vec3(0.);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
	float orbit_amount = param.orbit_velocity;
	if (orbit_amount != 0.0) {
       vec3 pos = transform[3].xyz;
       vec3 org = emission_transform[3].xyz;
       vec3 diff = pos - org;
	     float ang = orbit_amount * pi * 2.0 * delta;
	     mat2 rot = mat2(vec2(cos(ang), -sin(ang)), vec2(sin(ang), cos(ang)));
	     displacement.xy -= diff.xy;
        displacement.xy += rot * diff.xy;
	}
       return (emission_transform * vec4(displacement/delta, 0.0)).xyz;
}


vec3 get_random_direction_from_spread(inout uint alt_seed, float spread_angle){
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
	vec3 velocity = vec3(0.);
	float spread_rad = spread_angle * degree_to_rad;
	float angle1_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad;
	float angle2_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad * (1.0 - flatness);
	vec3 direction_xz = vec3(sin(angle1_rad), 0.0, cos(angle1_rad));
	vec3 direction_yz = vec3(0.0, sin(angle2_rad), cos(angle2_rad));
	direction_yz.z = direction_yz.z / max(0.0001,sqrt(abs(direction_yz.z))); // better uniform distribution
	vec3 spread_direction = vec3(direction_xz.x * direction_yz.z, direction_yz.y, direction_xz.z * direction_yz.z);
	vec3 direction_nrm = length(direction) > 0.0 ? normalize(direction) : vec3(0.0, 0.0, 1.0);
	// rotate spread to direction
	vec3 binormal = cross(vec3(0.0, 1.0, 0.0), direction_nrm);
	if (length(binormal) < 0.0001) {
		// direction is parallel to Y. Choose Z as the binormal.
		binormal = vec3(0.0, 0.0, 1.0);
	}
	binormal = normalize(binormal);
	vec3 normal = cross(binormal, direction_nrm);
	spread_direction = binormal * spread_direction.x + normal * spread_direction.y + direction_nrm * spread_direction.z;
	return spread_direction;
}
vec3 process_radial_displacement(DynamicsParameters param, float lifetime, inout uint alt_seed, mat4 transform, mat4 emission_transform, float delta){
	vec3 radial_displacement = vec3(0.0);
	if (delta < 0.001){
		return radial_displacement;
	}
	float radial_displacement_multiplier = 1.0;
	vec3 global_pivot = (emission_transform * vec4(velocity_pivot, 1.0)).xyz;
	if(length(transform[3].xyz - global_pivot) > 0.01){
		radial_displacement = normalize(transform[3].xyz - global_pivot) * radial_displacement_multiplier * param.radial_velocity;
	}else{radial_displacement = get_random_direction_from_spread(alt_seed, 360.0)* param.radial_velocity;} 
	if (radial_displacement_multiplier * param.radial_velocity < 0.0){
 // Prevent inwards velocity to flicker once the point is reached.		if (length(radial_displacement) > 0.01){
		radial_displacement = normalize(radial_displacement) * min(abs((radial_displacement_multiplier * param.radial_velocity)), length(transform[3].xyz - global_pivot) / delta);
		}
	
	return radial_displacement;
}

void process_physical_parameters(inout PhysicalParameters params, float lifetime_percent){
	
}

void start() {
	uint base_number = NUMBER;
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	DisplayParameters params;
	calculate_initial_display_params(params, alt_seed);
	// reset alt seed?
	// alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	DynamicsParameters dynamic_params;
	calculate_initial_dynamics_params(dynamic_params, alt_seed);
	PhysicalParameters physics_params;
	calculate_initial_physical_params(physics_params, alt_seed);
   process_display_param(params, 0.0);
	if (rand_from_seed(alt_seed) > AMOUNT_RATIO) {
		ACTIVE = false;
	}
	
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
	
	if (RESTART_CUSTOM){
		CUSTOM = vec4(0.);
		CUSTOM.w = params.lifetime;
		CUSTOM.x = dynamic_params.angle;
	}
	if (RESTART_COLOR){
		COLOR = params.color;
	}
	if (RESTART_ROT_SCALE) {
		TRANSFORM[0].xyz = vec3(1.0, 0.0, 0.0);
		TRANSFORM[1].xyz = vec3(0.0, 1.0, 0.0);
		TRANSFORM[2].xyz = vec3(0.0, 0.0, 1.0);
	}

	if (RESTART_POSITION) {
		TRANSFORM[3].xyz = calculate_initial_position(alt_seed);
		TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		}
	if (RESTART_VELOCITY) {
		VELOCITY = get_random_direction_from_spread(alt_seed, spread) * dynamic_params.initial_velocity_multiplier;
		}
	process_display_param(params, 0.);
//	process_dynamic_parameters(dynamic_params, 0., alt_seed, TRANSFORM, EMISSION_TRANSFORM, DELTA);
	VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
	VELOCITY += EMITTER_VELOCITY * inherit_emitter_velocity_ratio;
	VELOCITY.z = 0.;
	TRANSFORM[3].z = 0.;
	
	vec2 particlePosition = TRANSFORM[3].xy;
	vec2 textureS = vec2(textureSize(sprite,0));
	vec4 spriteColor = texture(sprite,particlePosition/textureS + vec2(0.5,0.5));
	COLOR = spriteColor;
	VELOCITY.xy = particlePosition * initial_linear_velocity_max;
}

void process() {
	uint base_number = NUMBER;
//	if (repeatable){
//		base_number = INDEX;
//	}
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	DisplayParameters params;
	calculate_initial_display_params(params, alt_seed);
	DynamicsParameters dynamic_params;
	calculate_initial_dynamics_params(dynamic_params, alt_seed);
	PhysicalParameters physics_params;
	calculate_initial_physical_params(physics_params, alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	CUSTOM.y += DELTA / LIFETIME;
	CUSTOM.y = mix(CUSTOM.y, 1.0, INTERPOLATE_TO_END);
	float lifetime_percent = CUSTOM.y/ params.lifetime;
	if (CUSTOM.y > CUSTOM.w) {
		ACTIVE = false;
	}
	
	
	
	// will use this later to calculate final displacement and orient the particle.
	vec3 starting_position = TRANSFORM[3].xyz;
	vec3 controlled_displacement = vec3(0.0);
	
//	VELOCITY += process_physics_parameters(dynamic_params, lifetime_percent, alt_seed, TRANSFORM, EMISSION_TRANSFORM, DELTA);
	
	controlled_displacement += process_orbit_displacement(dynamic_params, lifetime_percent, alt_seed, TRANSFORM, EMISSION_TRANSFORM, DELTA, params.lifetime * LIFETIME);
	// calculate all velocity
	
	controlled_displacement += process_radial_displacement(dynamic_params, lifetime_percent, alt_seed, TRANSFORM, EMISSION_TRANSFORM, DELTA);
	
	
	process_physical_parameters(physics_params, lifetime_percent);
	vec3 force;
	{
		// copied from previous version
		vec3 pos = TRANSFORM[3].xyz;
		force = gravity;
		// apply linear acceleration
		force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * physics_params.linear_accel : vec3(0.0);
		// apply radial acceleration
		vec3 org = EMISSION_TRANSFORM[3].xyz;
		vec3 diff = pos - org;
		force += length(diff) > 0.0 ? normalize(diff) * physics_params.radial_accel : vec3(0.0);
		// apply tangential acceleration;
		float tangent_accel_val = physics_params.tangent_accel;
       force += length(diff.yx) > 0.0 ? vec3(normalize(diff.yx * vec2(-1.0, 1.0)), 0.0) * tangent_accel_val : vec3(0.0);
		force += ATTRACTOR_FORCE;

		// apply attractor forces
			force.z = 0.;
		VELOCITY += force * DELTA;
	}
	{
		// copied from previous version
		if (physics_params.damping > 0.0) {
			float v = length(VELOCITY);
			v -= physics_params.damping * DELTA;
			if (v < 0.0) {
				VELOCITY = vec3(0.0);
			} else {
				VELOCITY = normalize(VELOCITY) * v;
			}
		}
		
	}
	
	
	// turbulence before limiting
	vec3 final_velocity = controlled_displacement + VELOCITY;
	
	// limit velocity
	
		final_velocity.z = 0.;
	TRANSFORM[3].xyz += final_velocity * DELTA;
	
	
	process_display_param(params, lifetime_percent);
	
	float base_angle = dynamic_params.angle;
	base_angle += CUSTOM.y * LIFETIME * dynamic_params.angular_velocity;
	CUSTOM.x = base_angle * degree_to_rad;
	TRANSFORM[0] = vec4(cos(CUSTOM.x), -sin(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[1] = vec4(sin(CUSTOM.x), cos(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[2] = vec4(0.0, 0.0, 1.0, 0.0);
	TRANSFORM[3].z = 0.0;
//	params.scale *= length(final_velocity)/100.0;

	TRANSFORM[0].xyz *= sign(params.scale.x) * max(abs(params.scale.x), 0.001);
	TRANSFORM[1].xyz *= sign(params.scale.y) * max(abs(params.scale.y), 0.001);
	TRANSFORM[2].xyz *= sign(params.scale.z) * max(abs(params.scale.z), 0.001);
	
	// 
	CUSTOM.z = params.animation_offset + lifetime_percent * params.animation_speed;
	
	if (CUSTOM.y > CUSTOM.w) {
		ACTIVE = false;
	}
	if (COLOR.a > 0.0){
		COLOR.a -= 1.0 / LIFETIME * DELTA;
	}
	
}

"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_hwacs"]
shader = SubResource("Shader_cjra7")
shader_parameter/direction = Vector3(1, 0, 0)
shader_parameter/spread = 180.0
shader_parameter/flatness = 0.0
shader_parameter/inherit_emitter_velocity_ratio = 0.0
shader_parameter/initial_linear_velocity_min = 2.0
shader_parameter/initial_linear_velocity_max = 1.5
shader_parameter/directional_velocity_min = 1.0
shader_parameter/directional_velocity_max = 1.0
shader_parameter/angular_velocity_min = 0.0
shader_parameter/angular_velocity_max = 0.0
shader_parameter/orbit_velocity_min = 0.0
shader_parameter/orbit_velocity_max = 0.0
shader_parameter/radial_velocity_min = null
shader_parameter/radial_velocity_max = 10.0
shader_parameter/linear_accel_min = 0.0
shader_parameter/linear_accel_max = 0.0
shader_parameter/radial_accel_min = 0.0
shader_parameter/radial_accel_max = 0.0
shader_parameter/tangent_accel_min = 0.0
shader_parameter/tangent_accel_max = 0.0
shader_parameter/damping_min = 0.0
shader_parameter/damping_max = 0.0
shader_parameter/initial_angle_min = 0.0
shader_parameter/initial_angle_max = 0.0
shader_parameter/scale_min = 1.0
shader_parameter/scale_max = 1.0
shader_parameter/hue_variation_min = 0.0
shader_parameter/hue_variation_max = 0.0
shader_parameter/anim_speed_min = 0.0
shader_parameter/anim_speed_max = 0.0
shader_parameter/anim_offset_min = 0.0
shader_parameter/anim_offset_max = 0.0
shader_parameter/lifetime_randomness = 0.0
shader_parameter/emission_shape_offset = Vector3(0, 0, 0)
shader_parameter/emission_shape_scale = Vector3(1, 1, 1)
shader_parameter/velocity_pivot = Vector3(0, 0, 0)
shader_parameter/emission_box_extents = Vector3(30, 30, 1)
shader_parameter/color_value = Color(1, 1, 1, 1)
shader_parameter/gravity = Vector3(0, -1e-06, 0)
shader_parameter/sprite = ExtResource("2_mm60a")

[sub_resource type="Gradient" id="Gradient_fvor1"]
offsets = PackedFloat32Array(0, 0.0143541, 0.0478469, 1)
colors = PackedColorArray(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_oh70j"]
gradient = SubResource("Gradient_fvor1")
width = 1
height = 1

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_3ac47"]
bg_color = Color(0.207843, 0.207843, 0.25098, 1)
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
border_color = Color(0.568627, 0.552941, 0.552941, 1)

[sub_resource type="LabelSettings" id="LabelSettings_qtu0t"]
font = ExtResource("6_bvov2")
font_size = 64
font_color = Color(0.662745, 0.286275, 0.286275, 1)
outline_size = 8
outline_color = Color(0.207843, 0.207843, 0.25098, 1)

[sub_resource type="LabelSettings" id="LabelSettings_5s5wb"]
font = ExtResource("6_bvov2")
font_size = 64
font_color = Color(0.309804, 0.392157, 0.721569, 1)
outline_size = 8
outline_color = Color(0.207843, 0.207843, 0.25098, 1)

[node name="Enemy" type="Node2D"]
light_mask = 7
z_index = 5
script = ExtResource("1_iuwds")

[node name="Sprite" type="Sprite2D" parent="."]
light_mask = 2
material = SubResource("ShaderMaterial_fjtdi")
position = Vector2(1, 0)
scale = Vector2(3, 3)
texture = ExtResource("2_mm60a")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_oafv5")
}

[node name="HitParticles" type="CPUParticles2D" parent="."]
scale = Vector2(0.5, 0.5)
emitting = false
amount = 32
lifetime = 0.5
one_shot = true
speed_scale = 2.52
explosiveness = 0.55
texture = ExtResource("7_n7t8x")
emission_shape = 3
emission_rect_extents = Vector2(3, 3)
spread = 180.0
gravity = Vector2(0, 0)
initial_velocity_min = 166.67
initial_velocity_max = 516.57
scale_amount_min = 0.0
scale_amount_max = 0.5
color = Color(0.792157, 0.34902, 0.329412, 1)

[node name="DeathParticles" type="GPUParticles2D" parent="."]
position = Vector2(0, -2)
scale = Vector2(3, 3)
emitting = false
amount = 10000
process_material = SubResource("ShaderMaterial_hwacs")
texture = SubResource("GradientTexture2D_oh70j")
lifetime = 0.6
one_shot = true
explosiveness = 1.0
fixed_fps = 60
local_coords = true
draw_order = 0

[node name="LightOccluder2D" type="LightOccluder2D" parent="."]
occluder = ExtResource("5_dygeo")

[node name="Control" type="Control" parent="."]
light_mask = 4
visibility_layer = 4
layout_mode = 3
anchors_preset = 0
offset_left = -81.0
offset_top = -251.0
offset_right = 78.0
offset_bottom = 202.0

[node name="HealthBar" type="Sprite2D" parent="Control"]
light_mask = 4
visibility_layer = 4
position = Vector2(81, -4)
texture = ExtResource("2_6xp31")

[node name="HealthBarRect" type="ColorRect" parent="Control/HealthBar"]
light_mask = 4
visibility_layer = 4
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -61.0
offset_top = -14.0
offset_right = -67.0
offset_bottom = -19.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0.662745, 0.286275, 0.286275, 1)

[node name="BlockBarRect" type="ColorRect" parent="Control/HealthBar"]
light_mask = 4
visibility_layer = 4
anchors_preset = -1
anchor_left = 0.03
anchor_top = 0.062
anchor_right = 0.977
anchor_bottom = 0.906
offset_left = 39.16
offset_top = -15.984
offset_right = -64.056
offset_bottom = -15.992
color = Color(0.309804, 0.392157, 0.721569, 1)

[node name="BlockIcon" type="Sprite2D" parent="Control/HealthBar"]
light_mask = 4
visibility_layer = 4
position = Vector2(-88, 0.99999)
scale = Vector2(1.08854, 1.08854)
texture = ExtResource("5_pxudm")

[node name="Label" type="Label" parent="Control/HealthBar/BlockIcon"]
light_mask = 4
visibility_layer = 4
anchors_preset = -1
anchor_right = 1.031
anchor_bottom = 1.094
offset_left = -16.0
offset_top = -15.0
offset_right = -15.992
offset_bottom = -16.008
text = "3"
label_settings = ExtResource("3_22tp7")
horizontal_alignment = 1
vertical_alignment = 1

[node name="HealthLabel" type="Label" parent="Control/HealthBar"]
light_mask = 4
visibility_layer = 4
anchors_preset = -1
anchor_right = 0.977
anchor_bottom = 0.906
offset_left = -61.0
offset_top = -14.0
offset_right = -64.056
offset_bottom = -15.992
text = "10/10
"
label_settings = ExtResource("3_22tp7")
horizontal_alignment = 1
vertical_alignment = 1

[node name="StaminaBar" type="Sprite2D" parent="Control"]
light_mask = 4
visibility_layer = 4
position = Vector2(81, 32)
texture = ExtResource("2_6xp31")

[node name="StaminaBarRect" type="ColorRect" parent="Control/StaminaBar"]
light_mask = 4
visibility_layer = 4
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -61.0
offset_top = -13.0
offset_right = -67.0
offset_bottom = -19.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0.333333, 0.490196, 0.333333, 1)

[node name="StaminaLabel" type="Label" parent="Control/StaminaBar"]
light_mask = 4
visibility_layer = 4
anchors_preset = -1
anchor_right = 1.0
anchor_bottom = 0.969
offset_left = -61.0
offset_top = -13.0
offset_right = -67.0
offset_bottom = -18.008
text = "3/3
"
label_settings = ExtResource("3_22tp7")
horizontal_alignment = 1
vertical_alignment = 1

[node name="InfoBox" type="Panel" parent="Control"]
visible = false
light_mask = 4
visibility_layer = 4
layout_mode = 0
offset_left = -106.0
offset_top = 33.0
offset_right = -11.0
offset_bottom = 163.0
theme_override_styles/panel = SubResource("StyleBoxFlat_3ac47")

[node name="InfoPopup" type="VBoxContainer" parent="Control"]
light_mask = 4
visibility_layer = 4
layout_mode = 0
offset_left = -94.0
offset_top = 41.0
offset_right = 10.0
offset_bottom = 379.0

[node name="StatusEffectContainer" type="HBoxContainer" parent="Control"]
light_mask = 4
visibility_layer = 4
layout_mode = 0
offset_left = 20.0
offset_top = -57.0
offset_right = 337.0
offset_bottom = 13.0
scale = Vector2(0.5, 0.5)

[node name="HitAmount" type="Label" parent="Control"]
visible = false
light_mask = 4
visibility_layer = 4
layout_mode = 0
offset_left = 34.0
offset_top = 135.0
offset_right = 74.0
offset_bottom = 199.0
text = "8"
label_settings = SubResource("LabelSettings_qtu0t")

[node name="BlockAmount" type="Label" parent="Control"]
visible = false
light_mask = 4
visibility_layer = 4
layout_mode = 0
offset_left = 83.0
offset_top = 137.0
offset_right = 123.0
offset_bottom = 201.0
text = "8"
label_settings = SubResource("LabelSettings_5s5wb")

[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_animation_finished"]
[connection signal="finished" from="DeathParticles" to="." method="_on_death_particles_finished"]
[connection signal="gui_input" from="Control" to="." method="_on_input"]
[connection signal="mouse_entered" from="Control" to="." method="_on_hover"]
[connection signal="mouse_exited" from="Control" to="." method="_on_hover_end"]
